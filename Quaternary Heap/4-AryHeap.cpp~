/*-- BinaryHeap.cpp --*/

#include <iostream>
#include <vector>
#include "BinaryHeap.h"

using namespace std;

Node::Node () : id(0), key(infinite) {}
Node::~Node () {}

//private methods

bool BinaryHeap::root (unsigned long p) { return (p == 0); }
unsigned long BinaryHeap::parent (unsigned long p) { return ((p - 1) / 2); }
unsigned long BinaryHeap::id (unsigned long p) { return H[p].id; }
unsigned int BinaryHeap::key (unsigned long p) { return H[p].key; }
unsigned long BinaryHeap::left (unsigned long p) { return ((2 * p) + 1 ); }
unsigned long BinaryHeap::right (unsigned long p) { return ((2 * p) + 2 ); }

int BinaryHeap::heapify_up (unsigned long p) {

	if (root(p)) return 0;

	if (key(parent(p)) > key(p)) {
		swap (pos[id(p)], pos[id(parent(p))]);
		swap (H[parent(p)], H[p]);
		heapify_up (parent(p));
	}

		return 0;
}

int BinaryHeap::heapify_down (unsigned long p) {

	if (right(p) > length) return 0;

	if (right(p) == length)
		if (key(left(p)) < key(p)) {
			swap (pos[id(p)], pos[id(left(p))]);
			swap (H[left(p)], H[p]);
		}

	if (right(p) < length) {
		if ((key(p) > key(left(p))) || (key(p) > key(right(p)))) {
			if (key(left(p)) < key(right(p))) {
				swap (pos[id(p)], pos[id(left(p))]);
				swap (H[left(p)], H[p]);
				heapify_down(left(p));
			}
			else {
				swap (pos[id(p)], pos[id(right(p))]);
				swap (H[right(p)], H[p]);
				heapify_down (right(p));
			}
		}
	}

	return 0;
}

BinaryHeap::BinaryHeap (unsigned long par) : H(par), pos(par) {  //StartHeap-like constructor

	length = 0;

}

BinaryHeap::~BinaryHeap () {} //class destructor

unsigned long BinaryHeap::get_pos (unsigned long v) { return pos[v]; }

bool BinaryHeap::empty () { return length == 0? true : false; }

void BinaryHeap::insert (unsigned long v, unsigned int d) {

	Node new_element;

	new_element.id = v;
	new_element.key = d;

	H[length] = new_element;
	pos[new_element.id] = length;
	length++;
	heapify_up (length - 1);

}

void BinaryHeap::Delete (unsigned long p) {

	--length;

	swap (pos[id(p)], pos[id(length)]);
	swap (H[p], H[length]);

	H[length].id = 0;
	H[length].key = infinite;

	heapify_down (p);

}

Node BinaryHeap::get_min () {
		Node res;
		res.id = H[0].id;
		res.key = H[0].key;
		return (res);
 }

Node BinaryHeap::delete_min () {
		Node res = get_min();
		Delete (0);
		return (res);
}

void BinaryHeap::update (unsigned long p, unsigned int x) {

	if (x < key(p)) {
		H[p].key = x;
		heapify_up(p);
	}
	else {
		H[p].key = x;
		heapify_down(p);
	}

}
